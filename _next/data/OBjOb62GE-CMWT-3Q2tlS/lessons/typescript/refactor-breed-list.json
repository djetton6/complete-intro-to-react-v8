{"pageProps":{"post":{"attributes":{"description":"Brian quickly converts useBreedList.ts"},"html":"<p>Now let&#39;s go do useBreedList.ts.</p>\n<pre><code class=\"language-javascript\">import { QueryStatus, useQuery } from &quot;@tanstack/react-query&quot;;\nimport { Animal } from &quot;./APIResponsesTypes&quot;;\nimport fetchBreedList from &quot;./fetchBreedList&quot;;\n\nexport default function useBreedList(animal: Animal) {\n  const results = useQuery([&quot;breeds&quot;, animal], fetchBreedList);\n\n  return [results?.data?.breeds ?? [], results.status] as [\n    string[],\n    QueryStatus\n  ];\n}\n</code></pre>\n<ul>\n<li>We need to type the parameter as an Animal. If we&#39;re going to assert it&#39;s an animal we have to have that type follow it around.</li>\n<li>We need to use <code>as</code> here to tell TypeScript we explictly expect it to be a length 2 array with the first item being a string array (which could be empty) and the second item being a loading status. Otherwise TypeScript thinks it&#39;s a heterogenous array where any item could be any of those types.</li>\n</ul>\n","slug":"refactor-breed-list","title":"Refactor Breed List","section":"TypeScript","icon":"pencil-ruler","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/13-typescript/I-refactor-breed-list.md","nextSlug":"/lessons/typescript/refactor-search-params","prevSlug":"/lessons/typescript/refactor-fetches"}},"__N_SSG":true}