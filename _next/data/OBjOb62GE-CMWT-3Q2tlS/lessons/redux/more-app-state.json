{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>Okay, let&#39;s make another page use Redux, our SearchParams.jsx</p>\n<p>This is a bit of a contrived example so stick with me here. Let&#39;s say we have the following product requirements:</p>\n<ul>\n<li>When a user searches for something, then clicks on a pet, then clicks back, we want to show the same search results</li>\n<li>We still want to leave our search params form as uncontrolled components</li>\n</ul>\n<p>So how would we do that? We need something that&#39;s going to have survive state changes between page loads. Redux is perfect for that sort of app state. Let&#39;s see how we&#39;d do that.</p>\n<p>Start with a searchParamsSlice.js</p>\n<pre><code class=\"language-javascript\">import { createSlice } from &quot;@reduxjs/toolkit&quot;;\n\nexport const searchParamsSlice = createSlice({\n  name: &quot;searchParams&quot;,\n  initialState: {\n    value: {\n      location: &quot;&quot;,\n      breed: &quot;&quot;,\n      animal: &quot;&quot;,\n    },\n  },\n  reducers: {\n    all: (state, action) =&gt; {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { all } = searchParamsSlice.actions;\n\nexport default searchParamsSlice.reducer;\n</code></pre>\n<p>You could have an individual reducer for each of location, breed, and animal but we don&#39;t need that now. Right now the only place we set those (the form submit) we do it all at once. So this is good as is.</p>\n<p>In store.js</p>\n<pre><code class=\"language-javascript\">// at top\nimport searchParams from &quot;./searchParamsSlice&quot;;\n\n// inside reducers\nsearchParams,\n</code></pre>\n<p>In SearchParams.jsx</p>\n<pre><code class=\"language-javascript\">// at top\nimport { useSelector, useDispatch } from &quot;react-redux&quot;; // add dispatch\nimport { all } from &quot;./searchParamsSlice&quot;;\n\n// with other hooks\nconst dispatch = useDispatch();\nconst adoptedPet = useSelector((state) =&gt; state.adoptedPet.value);\nconst searchParams = useSelector((state) =&gt; state.searchParams.value);\nconst results = useQuery([&quot;search&quot;, searchParams], fetchSearch); // replace requestParams\n\n// replace setRequestParams in form submit\ndispatch(all(obj));\n</code></pre>\n<p>Not too bad, right? Now if you back and forth the app state is preserved between page loads. The form isn&#39;t reflecting it because we left the form uncontrolled. As an exercise you could go back and make it a controlled form so that would change too.</p>\n","slug":"more-app-state","title":"More App State","section":"Redux","icon":"database","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/14-redux/B-more-app-state.md","nextSlug":"/lessons/redux/rtk-query","prevSlug":"/lessons/redux/redux-toolkit"}},"__N_SSG":true}