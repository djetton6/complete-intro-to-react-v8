{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>We also want to move SearchParms to use react-query but we have a problem: if we just plug <code>location</code> directly into the cache key as-is we will make a new request on <em>every</em> keystroke of the user. That may be what you want but it&#39;s not the behavior we had before and for now we want to stay with that.</p>\n<p>But what about animal and breed? We <em>do</em> want to react to animal changing on the breed drop down. So how we do handle that too?</p>\n<p>We&#39;re going to mix an uncontrolled form in with tracking <em>just</em> animal as a controlled input.</p>\n<p>Before we get too far, let&#39;s split out requestPets into a file called fetchSearch.js</p>\n<pre><code class=\"language-javascript\">async function fetchSearch({ queryKey }) {\n  const { animal, location, breed } = queryKey[1];\n  const res = await fetch(\n    `http://pets-v2.dev-apis.com/pets?animal=${animal}&amp;location=${location}&amp;breed=${breed}`\n  );\n\n  if (!res.ok)\n    throw new Error(`pet search not okay: ${animal}, ${location}, ${breed}`);\n\n  return res.json();\n}\n\nexport default fetchSearch;\n</code></pre>\n<p>From there let&#39;s go modify SearchParams.jsx</p>\n<pre><code class=\"language-javascript\">// at top\n// remove useEffect import from &#39;react&#39; import\nimport { useQuery } from &quot;@tanstack/react-query&quot;;\nimport fetchSearch from &quot;./fetchSearch&quot;;\n\n// inside render, at top\n// delete location and breed useState calls\nconst [requestParams, setRequestParams] = useState({\n  location: &quot;&quot;,\n  animal: &quot;&quot;,\n  breed: &quot;&quot;,\n});\n\nconst results = useQuery([&quot;search&quot;, requestParams], fetchSearch);\nconst pets = results?.data?.pets ?? [];\n\n// delete useEffect\n\n// delete requestPets\n\n// replace the form submit function body\ne.preventDefault();\nconst formData = new FormData(e.target);\nconst obj = {\n  animal: formData.get(&quot;animal&quot;) ?? &quot;&quot;,\n  breed: formData.get(&quot;breed&quot;) ?? &quot;&quot;,\n  location: formData.get(&quot;location&quot;) ?? &quot;&quot;,\n};\nsetRequestParams(obj);\n\n// remove onChange and onBlur functions for breed and location select and input\n// remove value={location} / value={animal} / value={breed} from three input / selects\n// add name=&quot;animal&quot; / name=&quot;location&quot; / name=&quot;breed&quot; to the three input / selects\n</code></pre>\n<ul>\n<li>Notice how much faster it is going back-and-forth from one search query and back to another. The cache for this is fast and easy to use</li>\n<li>We no longer have <em>any</em> useEffect calls in our code. This won&#39;t always be the case but it&#39;s a nice thing to have. useEffect calls are a lot more difficult to get your head around. Where you have alternatives (like react-query) I suggest avoiding useEffect calls and offload that async code to a smart library like react-query</li>\n<li>We&#39;re now doing an uncontrolled form with React (which unless you have specific validation needs or dependencies like we do with animal, I suggest you always do). We don&#39;t have to have verbose two-way data binding code to control the form, we can just wait until a users submits, gather the data, and ship it off to the API</li>\n<li>We do have a controlled input on animal to properly have it determine the useBreedList animal. But we&#39;re not using the controlled input to submit the form, we&#39;re just using the form event anyway</li>\n</ul>\n<p>There you go! Now our app is totally powered by react-query and no more effects in the App. I showed you how to write useEffect because it is a critical tool to know how to use with React and central to it, but I wanted to show you how to write it and then refactor it out later.</p>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v8-project/tree/master/10-uncontrolled-forms\">Click here to see the state of the project up until now: 10-uncontrolled-forms</a></p>\n</blockquote>\n","slug":"uncontrolled-forms","title":"Uncontrolled Forms","section":"React Capabilities","icon":"map","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/05-react-capabilities/C-uncontrolled-forms.md","nextSlug":"/lessons/react-capabilities/class-components","prevSlug":"/lessons/react-capabilities/react-query"}},"__N_SSG":true}