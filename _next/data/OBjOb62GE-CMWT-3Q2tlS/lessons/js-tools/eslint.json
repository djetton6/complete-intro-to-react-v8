{"pageProps":{"post":{"attributes":{"title":"ESLint","description":"An essential part of maintaining a project a long time is discipline in coding standards and avoiding antipatterns. ESLint is a great tool that helps you do just that."},"html":"<p>On top of Prettier which takes of all the formatting, you may want to enforce some code styles which pertain more to usage: for example you may want to force people to never use <code>with</code> which is valid JS but ill advised to use. <a href=\"https://eslint.org\">ESLint</a> comes into play here. It will lint for this problems.</p>\n<p>First of all, run <code>npm install -D eslint@8.24.0 eslint-config-prettier@8.5.0</code> to install eslint in your project development dependencies. Then you may configure its functionalities.</p>\n<p>There are dozens of preset configs for ESLint and you&#39;re welcome to use any one of them. The <a href=\"https://github.com/airbnb/javascript\">Airbnb config</a> is very popular, as is the standard config (both of which I taught in previous versions of this class). I&#39;m going to use a looser one for this class: <code>eslint:recommended</code>. Let&#39;s create an <code>.eslintrc.json</code> file to start linting our project.</p>\n<p>Create this file called <code>.eslintrc.json</code>.</p>\n<pre><code class=\"language-json\">{\n  &quot;extends&quot;: [&quot;eslint:recommended&quot;, &quot;prettier&quot;],\n  &quot;plugins&quot;: [],\n  &quot;parserOptions&quot;: {\n    &quot;ecmaVersion&quot;: 2022,\n    &quot;sourceType&quot;: &quot;module&quot;,\n    &quot;ecmaFeatures&quot;: {\n      &quot;jsx&quot;: true\n    }\n  },\n  &quot;env&quot;: {\n    &quot;es6&quot;: true,\n    &quot;browser&quot;: true,\n    &quot;node&quot;: true\n  }\n}\n</code></pre>\n<p>This is a combination of the recommended configs of ESLint and Prettier. This will lint for both normal JS stuff as well as JSX stuff. Run <code>npx eslint src/App.js</code> now and you should see we have a few errors. Run it again with the <code>--fix</code> flag and see it will fix some of it for us! Go fix the rest of your errors and come back. Let&#39;s go add this to our npm scripts.</p>\n<pre><code class=\"language-json\">&quot;lint&quot;: &quot;eslint \\&quot;src/**/*.{js,jsx}\\&quot; --quiet&quot;,\n</code></pre>\n<blockquote>\n<p>ðŸš¨ ESLint will have a bunch of errors right now. Ignore them; we&#39;ll fix them in a sec.</p>\n</blockquote>\n<p>Worth adding three things here:</p>\n<ul>\n<li>With npm scripts, you can pass additional parameters to the command if you want. Just add a <code>--</code> and then put whatever else you want to tack on after that. For example, if I wanted to get the debug output from ESLint, I could run <code>npm run lint -- --debug</code> which would translate to <code>eslint **/*.js --debug</code>.</li>\n<li>We can use our fix trick this way: <code>npm run lint -- --fix</code>.</li>\n<li>We&#39;re going to both JS and JSX.</li>\n</ul>\n<p>ESLint is a cinch to get working with <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>. Just download <a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">the extension</a>.</p>\n<h2 id=\"alternatives\">Alternatives</h2>\n<ul>\n<li><a href=\"http://jshint.com/\">jshint</a></li>\n</ul>\n","slug":"eslint","title":"ESLint","section":"JS Tools","icon":"hammer","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/03-js-tools/C-eslint.md","nextSlug":"/lessons/js-tools/git","prevSlug":"/lessons/js-tools/prettier"}},"__N_SSG":true}